STEP 1 :

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns

STEP 2 :

df = pd.read_csv('KNN_Project_Data')
df.head()


STEP 3 : EDA

sns.pairplot(df, hue='TARGET CLASS')


STEP 4 : Standardize the Variables

from sklearn.preprocessing import StandardScaler
scaler = StandardScaler()
scaler.fit(df.drop('TARGET CLASS',axis=1))
scaled_features = scaler.transform(df.drop('TARGET CLASS', axis=1))
df_feat = pd.DataFrame(scaled_features, columns=df.columns[:-1])
df_feat.head()


STEP 5 : Train Test Split


from sklearn.model_selection import train_test_split
x_train, x_test, y_train, y_test = train_test_split(scaled_features, df['TARGET CLASS'], test_size=0.30)


STEP 6 : KNN


from sklearn.neighbors import KNeighborsClassifier
knn = KNeighborsClassifier(n_neighbors=1)
knn.fit(x_train, y_train)


STEP 7 : Predictions and Evaluations


pred = knn.predict(x_test)
from sklearn.metrics import classification_report, confusion_matrix
confusion_matrix(y_test, pred)
print(classification_report(y_test, pred))


STEP 8 : Choosing a K Value


error_rate = []

for i in range(1, 40):
    knn = KNeighborsClassifier(n_neighbors=i)
    knn.fit(x_train, y_train)
    pred_i = knn.predict(x_test)
    error_rate.append(np.mean(pred_i != y_test))

plt.plot(range(1,40), error_rate, color='blue', marker='o', markerfacecolor='red')
plt.title("Error Rate vs. K Value")
plt.xlabel('K')
plt.ylabel('Error Rate')


STEP 9 : Retrain with new K Value


def calc_confusiion_matrix(value_of_k):
    knn = KNeighborsClassifier(n_neighbors=value_of_k)
    knn.fit(x_train, y_train)
    pred = knn.predict(x_test)
    print("Value of k is ", value_of_k)
    print(confusion_matrix(y_test, pred))
    print(classification_report(y_test, pred))
    

calc_confusiion_matrix(30)
